import streamlit as st
import time
import numpy as np
import ImageProcessing.Chapter3 as c3
import ImageProcessing.Chapter4 as c4
import ImageProcessing.Chapter5 as c5
import ImageProcessing.Chapter9 as c9
import cv2
import object_detection as od
from PIL import Image

st.set_page_config(page_title="X·ª≠ l√Ω ·∫£nh", page_icon="üìà")

page_bg_img = """
<style>
[data-testid="stAppViewContainer"] {
    background-image: url("https://st.quantrimang.com/photos/image/2019/11/12/Hinh-Nen-Den-23.jpg");
    background-size: 100% 100%;
}
[data-testid="stHeader"]{
    background: rgba(0,0,0,0);
}
h3,h1 {
    text-align: center;
}
[data-testid="stToolbar"]{
    right:2rem;
}

}
</style>
"""
st.markdown(page_bg_img,unsafe_allow_html=True)


st.markdown("# X·ª≠ l√Ω ·∫£nh")
st.write()

image_file = st.sidebar.file_uploader("T·∫£i ·∫£nh c·ªßa b·∫°n v√†o ƒë√¢y", type=[
                                  'jpg', 'png', 'jpeg', 'tif'])
global imgin
if image_file is not None:
    file_bytes = np.asarray(bytearray(image_file.read()), dtype=np.uint8)
    imgin = cv2.imdecode(file_bytes, cv2.IMREAD_GRAYSCALE) 

    chapter_options = ["Chapter 3", "Chapter 4", "Chapter 5", "Chapter 9"]
    selected_chapter = st.sidebar.selectbox("Select an option", chapter_options)


    if selected_chapter == "Chapter 3":
        st.markdown("### Ch∆∞∆°ng 3: Bi·∫øn ƒë·ªïi ƒë·ªô s√°ng v√† l·ªçc trong kh√¥ng gian")
        chapter3_options = ["Negative", "Logarit", "Power", "PiecewiseLinear", "Histogram", "HistogramEqualization",
                                                "HistogramEqualizationColor", "LocalHistogram", "HistogramStatistics", 
                                                "BoxFilter", "GaussFilter","Threshold", "MedianFilter", "Sharpen", "Gradient"]
        
        chapter3_selected = st.sidebar.selectbox("Select an option", chapter3_options)    
        if chapter3_selected  == "Negative":
            st.markdown("### 3.1: Negaive")
            st.markdown("##### Gi·ªõi thi·ªáu Negative: H√†m l√†m √¢m ·∫£nh. K·∫øt qu·∫£ l√†m √¢m ·∫£nh, tr·∫Øng th√†nh ƒëen v√† ng∆∞·ª£c l·∫°i")
            processed_image = c3.Negative(imgin)
        elif chapter3_selected  == "Logarit":
            st.markdown("### 3.2: Logarit")
            st.markdown("##### Gi·ªõi thi·ªáu Logarit: H√†m x·ª≠ l√Ω ·∫£nh b·∫±ng ph∆∞∆°ng ph√°p Logarit. K·∫øt qu·∫£: S√°ng √≠t th√¨ l√†m cho s√°ng nhi·ªÅu. ƒêen nhi·ªÅu th√¨ cho ƒëen √≠t")
            processed_image = c3.Logarit(imgin)
        elif chapter3_selected  == "Power":
            st.markdown("### 3.3: Power")
            st.markdown("##### Gi·ªõi thi·ªáu Power: H√†m x·ª≠ l√Ω ·∫£nh b·∫±ng ph∆∞∆°ng ph√°p lu·ªπ th·ª´a h√¨nh ·∫£nh. K·∫øt qu·∫£ h√†m Power: L√†m cho ·∫£nh tr·ªü n√™n t·ªëi h∆°n, hay s√°ng h∆°n,..")
            processed_image = c3.Power(imgin)
        elif chapter3_selected  == "PiecewiseLinear":
            st.markdown("### 3.4: PiecewiseLinear: Bi·∫øn ƒë·ªïi tuy·∫øn t√≠nh t·ª´ng ph·∫ßn")
            st.markdown("##### Gi·ªõi thi·ªáu PiecewiseLinear: H√†m x·ª≠ l√Ω ·∫£nh b·∫±ng ph∆∞∆°ng ph√°p Piecewise. K·∫øt qu·∫£: k√©o d√†i ƒë·ªô t∆∞∆°ng ph·∫£n, ph·∫°m vi v√† m·ª©c c∆∞·ªùng ƒë·ªô s√°ng h∆°n")
            processed_image = c3.PiecewiseLinear(imgin)
        elif chapter3_selected  == "Histogram":
            st.markdown("### 3.5: Histogram")
            st.markdown("##### Gi·ªõi thi·ªáu Histogram: H√†m th·ªëng k√™ m√¥ t·∫£ ph√¢n b·ªë t·∫ßn s·ªë xu·∫•t hi·ªán c·ªßa c√°c m·ª©c x√°m trong m·ªôt h√¨nh ·∫£nh, bi·ªÉu th·ªã  s·ªë l∆∞·ª£ng pixel c√≥ c√πng m·ª©c x√°m tr√™n tr·ª•c ngang v√† t·∫ßn su·∫•t xu·∫•t hi·ªán c·ªßa m·ªói m·ª©c x√°m tr√™n tr·ª•c d·ªçc")
            processed_image = c3.Histogram(imgin)
        elif chapter3_selected  == "HistogramEqualization":
            st.markdown("### 3.6: HistogramEqualization: C√¢n b·∫±ng Histogram")
            st.markdown("##### Gi·ªõi thi·ªáu HistogramEqualization: H√†m x·ª≠ l√Ω ·∫£nh ƒë·ªÉ tƒÉng c∆∞·ªùng ƒë·ªô t∆∞∆°ng ph·∫£n v√† c√¢n b·∫±ng ph√¢n b·ªë m·ª©c x√°m trong h√¨nh ·∫£nh. k·∫øt qu·∫£: H√¨nh ·∫£nh c·∫£i thi·ªán ƒë·ªô t∆∞∆°ng ph·∫£n, m·ª©c x√°m ƒë∆∞·ª£c ph√¢n b·ªë ƒë·ªìng ƒë·ªÅu v√† t·ª∑ l·ªá t·∫ßn su·∫•t xu·∫•t hi·ªán c·ªßa c√°c m·ª©c x√°m tr·ªü n√™n c√¢n ƒë·ªëi")
            processed_image = c3.HistEqual(imgin)
        elif chapter3_selected == "HistogramEqualizationColor":
            imgin = cv2.imdecode(file_bytes, cv2.IMREAD_COLOR)
            st.markdown("### 3.7: HistogramEqualizationColor: C√¢n b·∫±ng Histogram c·ªßa ·∫£nh m√†u")
            st.markdown("##### Gi·ªõi thi·ªáu HistogramEqualizationColor: H√†m c√¢n b·∫±ng histogram cho ·∫£nh m√†u, nh·∫±m c·∫£i thi·ªán ƒë·ªô t∆∞∆°ng ph·∫£n v√† ph√¢n b·ªë m√†u c·ªßa ·∫£nh. K·∫øt qu·∫£ c·ªßa Histogram Equalization Color l√† ·∫£nh ƒë∆∞·ª£c c√¢n b·∫±ng histogram m√†u")
            processed_image = c3.HistEqualColor(imgin)
        elif chapter3_selected  == "LocalHistogram":
            st.markdown("### 3.8: LocalHistogram")
            st.markdown("##### Gi·ªõi thi·ªáu LocalHistogram: H√†m x·ª≠ l√Ω ·∫£nh b·∫±ng ph∆∞∆°ng ph√°p LocalHistogram. k·∫øt qu·∫£ h√†m LocalHistogram: l√†m r√µ 1 v√πng trong ·∫£nh  ")
            processed_image = c3.LocalHist(imgin)
        elif chapter3_selected  == "HistogramStatistics":
            st.markdown("### 3.9: HistogramStatistics: Th·ªëng k√™ Histogram")
            st.markdown("##### Gi·ªõi thi·ªáu HistogramStatistics: H√†m x·ª≠ l√Ω ·∫£nh b·∫±ng ph∆∞∆°ng ph√°p HistogramStatistics. K·∫øt qu·∫£ h√†m: th·ªëng k√™ 1 v√πng trong ·∫£nh")
            processed_image = c3.HistStat(imgin)
        elif chapter3_selected  == "BoxFilter":
            st.markdown("### 3.10: BoxFilter")
            st.markdown("##### Gi·ªõi thi·ªáu BoxFilter: H√†m l√†m m·ªù ho·∫∑c l√†m tr∆°n ·∫£nh b·∫±ng c√°ch √°p d·ª•ng m·ªôt b·ªô l·ªçc c√≥ h√¨nh d·∫°ng h·ªôp ch·ªØ nh·∫≠t tr√™n c√°c pixel c·ªßa ·∫£nh. K·∫øt qu·∫£: ·∫¢nh ƒë∆∞·ª£c l√†m m·ªù")
            processed_image = c3.BoxFilter(imgin)
        elif chapter3_selected  == "GaussFilter":
            st.markdown("### 3.11: GaussFilter")
            st.markdown("##### Gi·ªõi thi·ªáu GaussFilter: H√†m l√†m m·ªù ho·∫∑c l√†m tr∆°n ·∫£nh b·∫±ng c√°ch √°p d·ª•ng m·ªôt b·ªô l·ªçc Gauss (b·ªô l·ªçc Gaussian) tr√™n c√°c pixel c·ªßa ·∫£nh. K·∫øt qu·∫£ c·ªßa GaussFilter l√† ·∫£nh ƒë∆∞·ª£c l√†m m·ªù m·ªôt c√°ch t·ª± nhi√™n, v·ªõi c√°c chi ti·∫øt c·ª•c b·ªô gi·∫£m ƒëi v√† ƒë·ªô t∆∞∆°ng ph·∫£n gi·∫£m")
            processed_image = c3.GaussFilter(imgin)
        elif chapter3_selected  == "Threshold":
            st.markdown("### 3.12: Threshold: Ph√¢n ng∆∞·ª°ng")
            st.markdown("##### Gi·ªõi thi·ªáu Threshold: H√†m ph√¢n lo·∫°i c√°c pixel trong ·∫£nh th√†nh hai nh√≥m d·ª±a tr√™n m·ªôt gi√° tr·ªã ng∆∞·ª°ng (threshold value) cho tr∆∞·ªõc. K·∫øt qu·∫£ c·ªßa Threshold l√† ·∫£nh ƒë∆∞·ª£c chia th√†nh hai v√πng: v√πng tr·∫Øng v√† v√πng ƒëen")
            processed_image = c3.Threshold(imgin)
        elif chapter3_selected  == "MedianFilter":
            st.markdown("### 3.13: MedianFilter")
            st.markdown("##### Gi·ªõi thi·ªáu MedianFilter: H√†m x·ª≠ l√Ω ·∫£nh b·∫±ng ph∆∞∆°ng ph√°p MedianFilter. K·∫øt qu·∫£ h√†m: L·ªçc nhi·ªÅu ·∫£nh, l·ªçc c√°c ƒëi·ªÉm nhi·ªÖu ·∫£nh")
            processed_image = c3.MedianFilter(imgin)
        elif chapter3_selected  == "Sharpen":
            st.markdown("### 3.13: Sharpen")
            st.markdown("##### Gi·ªõi thi·ªáu Sharpen: H√†m l√†m tƒÉng ƒë·ªô r√µ n√©t v√† ƒë·ªô t∆∞∆°ng ph·∫£n c·ªßa c√°c chi ti·∫øt trong ·∫£nh. K·∫øt qu·∫£: m·ªôt ·∫£nh m·ªõi c√≥ ƒë·ªô r√µ n√©t v√† ƒë·ªô t∆∞∆°ng ph·∫£n cao h∆°n so v·ªõi ·∫£nh g·ªëc")
            processed_image = c3.Sharpen(imgin)
        elif chapter3_selected  == "Gradient":
            st.markdown("### 3.13: Gradient")
            st.markdown("##### Gi·ªõi thi·ªáu Gradient:  H√†m x·ª≠ l√Ω b·∫±ng ph∆∞∆°ng ph√°p Gradient. K·∫øt qu·∫£: ƒê·∫°o h√†m ·ªëng k√≠nh t√°ch bi√™n c·ªßa ·∫£nh")
            processed_image = c3.Gradient(imgin) 
            
                      
    elif selected_chapter == "Chapter 4":
        st.markdown("### Ch∆∞∆°ng 4: L·ªçc trong mi·ªÅn t·∫ßn s·ªë")
        chapter4_options = ["Spectrum", "FrequencyFilter", "DrawFilter", "RemoveMoire"]
        
        chapter4_selected = st.sidebar.selectbox("Select an option", chapter4_options)   
        
        
        if chapter4_selected == "Spectrum":
            st.markdown("### 4.1: Spectrum")
            st.markdown("##### Gi·ªõi thi·ªáu Spectrum: Gi·ªõi thi·ªáu Spectrum: H√†m x·ª≠ l√Ω ·∫£nh b·∫±ng ph∆∞∆°ng ph√°p ph·ªï. K·∫øt qu·∫£ l√† ph·ªï m√†u c·ªßa ·∫£nh. ")

            processed_image = c4.Spectrum(imgin)
        elif chapter4_selected == "FrequencyFilter":
            st.markdown("### 4.2: FrequencyFilter")
            st.markdown("##### Gi·ªõi thi·ªáu FrequencyFilter: H√†m x·ª≠ l√Ω ·∫£nh b·∫±ng ph∆∞∆°ng ph√°p l·ªçc t·∫ßn s·ªë. K·∫øt qu·∫£ l√† cho t√≠n hi·ªáu c√≥ t·∫ßn s·ªë th·∫•p h∆°n t·∫ßn s·ªë c·∫Øt ƒë√£ ch·ªçn v√† l√†m cho suy gi·∫£m t√≠n hi·ªáu c√≥ t·∫ßn s·ªë cao h∆°n t·∫ßn s·ªë c·∫Øt ƒë·ªÉ x·ª≠ l√Ω ·∫£nh.")
            processed_image = c4.FrequencyFilter(imgin)
        elif chapter4_selected == "DrawFilter":
            st.markdown("### 4.3: DrawFilter")
            st.markdown("##### Gi·ªõi thi·ªáu DrawFilter: H√†m x·ª≠ l√Ω ·∫£nh b·∫±ng c√°ch v·∫Ω c√°c b·ªô l·ªçc tr√™n kh√¥ng gian t·∫ßn s·ªë. ")
            imgin = Image.new('RGB', (5, 5),  st.get_option("theme.backgroundColor"))
            processed_image = c4.DrawNotchRejectFilter()
        elif chapter4_selected == "RemoveMoire":
            st.markdown("### 4.4: RemoveMoire: Xo√° nhi·ªÖu Moire")
            st.markdown("##### Gi·ªõi thi·ªáu RemoveMoire: H√†m x·ª≠ l√Ω ·∫£nh ƒë·ªÉ lo·∫°i b·ªè hi·ªán t∆∞·ª£ng moir√©. K·∫øt qu·∫£: moir√© ƒë√£ ƒë∆∞·ª£c gi·∫£m thi·ªÉu ho·∫∑c lo·∫°i b·ªè, t·ª´ ƒë√≥ c·∫£i thi·ªán ƒë·ªô r√µ n√©t v√† ch·∫•t l∆∞·ª£ng c·ªßa h√¨nh ·∫£nh")

            processed_image = c4.RemoveMoire(imgin)
            

    elif selected_chapter == "Chapter 5":
        st.markdown("### Ch∆∞∆°ng 5: Kh√¥i ph·ª•c ·∫£nh")
        chapter5_options = ["CreateMotionNoise", "DenoiseMotion", "DenoisestMotion"]
        chapter5_selected = st.sidebar.selectbox("Select an option", chapter5_options)   
        
        if chapter5_selected == "CreateMotionNoise":
            st.markdown("### 5.1: CreateMotionNoise: T·∫°o nhi·ªÖu chuy·ªÉn ƒë·ªông")
            st.markdown("##### Gi·ªõi thi·ªáu CreateMotionNoise: Gi·ªõi thi·ªáu CreateMotionNoise: H√†m t·∫°o nhi·ªÖu chuy·ªÉn ƒë·ªông tr√™n ·∫£nh. K·∫øt qu·∫£: m·ªôt ·∫£nh ƒë√£ ƒë∆∞·ª£c t·∫°o nhi·ªÖu chuy·ªÉn ƒë·ªông")
            processed_image = c5.CreateMotionNoise(imgin)
        elif chapter5_selected == "DenoiseMotion":
            st.markdown("### 5.2: DenoiseMotion: G·ª° nhi·ªÖu c·ªßa ·∫£nh c√≥ √≠t nhi·ªÖu")
            st.markdown("##### Gi·ªõi thi·ªáu DenoiseMotion: H√†m DenoiseMotion ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ lo·∫°i b·ªè nhi·ªÖu chuy·ªÉn ƒë·ªông t·ª´ m·ªôt b·ª©c ·∫£nh (√≠t nhi·ªÖu). K·∫øt qu·∫£: ·∫£nh s·∫Ω ƒë∆∞·ª£c l√†m s·∫°ch kh·ªèi nhi·ªÖu chuy·ªÉn ƒë·ªông v√† tr·ªü n√™n r√µ r√†ng h∆°n ")
            processed_image = c5.DenoiseMotion(imgin)
        elif chapter5_selected == "DenoisestMotion":
            st.markdown("### 5.3: DenoisestMotion: G·ª° nhi·ªÖu c·ªßa ·∫£nh c√≥ nhi·ªÅu nhi·ªÖu")
            st.markdown("##### Gi·ªõi thi·ªáu DenoisestMotion: H√†m DenoiseMotion ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ lo·∫°i b·ªè nhi·ªÖu chuy·ªÉn ƒë·ªông t·ª´ m·ªôt b·ª©c ·∫£nh (nhi·ªÅu nhi·ªÖu). K·∫øt qu·∫£: ·∫£nh s·∫Ω ƒë∆∞·ª£c l√†m s·∫°ch kh·ªèi nhi·ªÖu chuy·ªÉn ƒë·ªông v√† tr·ªü n√™n r√µ r√†ng h∆°n  ")
            temp = cv2.medianBlur(imgin, 7)
            processed_image = c5.DenoiseMotion(temp)   
            
                 
    elif selected_chapter == "Chapter 9":
        st.markdown("### Ch∆∞∆°ng 9: X·ª≠ l√Ω ·∫£nh h√¨nh th√°i")
        chapter9_options = ["ConnectedComponent", "CountRice"]
        chapter9_selected = st.sidebar.selectbox("Select an option", chapter9_options)   
        
        if chapter9_selected  == "ConnectedComponent":
            st.markdown("### 9.1. ConnectedComponent: ƒê·∫øm th√†nh ph·∫ßn li√™n th√¥ng c·ªßa mi·∫øng phi l√™ g√† ")
            st.markdown("##### Gi·ªõi thi·ªáu ConnectedComponent: Ph∆∞∆°ng ph√°p ph√¢n ƒëo·∫°n ·∫£nh ƒë·ªÉ t√¨m v√† nh√≥m c√°c v√πng li√™n th√¥ng trong ·∫£nh d·ª±a tr√™n t√≠nh ch·∫•t h√¨nh h·ªçc ho·∫∑c m√†u s·∫Øc c·ªßa c√°c pixel. k·∫øt qu·∫£: ƒë·∫øm s·ªë l∆∞·ª£ng ƒë·ªëi t∆∞·ª£ng trong ·∫£nh ")
            processed_image = c9.ConnectedComponent(imgin)    
        elif chapter9_selected  == "CountRice":
            st.markdown("### 9.2: CountRice: ƒê·∫øm h·∫°t g·∫°o (Count Rice)")
            st.markdown("##### Gi·ªõi thi·ªáu CountRice: Ph∆∞∆°ng ph√°p ƒë·∫øm s·ªë h·∫°t g·∫°o ")

            processed_image = c9.CountRice(imgin)
    

    st.subheader("·∫¢nh g·ªëc v√† ·∫£nh ƒë√£ x·ª≠ l√Ω")
    st.image([imgin, processed_image], width = 350)
st.button("Re-run")
